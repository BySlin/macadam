/* Copyright 2018 Streampunk Media Ltd.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

/* -LICENSE-START-
 ** Copyright (c) 2010 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

#include "capture_promise.h"

HRESULT captureCarrier::VideoInputFrameArrived(
  IDeckLinkVideoInputFrame *videoFrame,
  IDeckLinkAudioInputPacket *audioPacket) {

  napi_status status;
  status = napi_acquire_threadsafe_function(tsFn);

  status = napi_release_threadsafe_function(tsFn, napi_tsfn_release);
  return 0;
};

HRESULT captureCarrier::VideoInputFormatChanged(
  BMDVideoInputFormatChangedEvents notificationEvents,
  IDeckLinkDisplayMode *newDisplayMode,
  BMDDetectedVideoInputFormatFlags detectedSignalFlags) {

  return 0;
}

// Should never get called
napi_value nop(napi_env env, napi_callback_info info) {

  return nullptr;
}

void finalizeCarrier(napi_env env, void* finalize_data, void* finalize_hint) {
  printf("Finalizing capture carrier.\n");
  captureCarrier* c = (captureCarrier*) finalize_data;
  delete c;
}

napi_value capture(napi_env env, napi_callback_info info) {
  napi_status status;
  napi_value result;
  napi_valuetype type;
  HRESULT hresult;
  napi_value param, paramPart;

  IDeckLinkIterator* deckLinkIterator;
  IDeckLink* deckLink = nullptr;
  IDeckLinkInput* deckLinkInput = nullptr;
  IDeckLinkDisplayMode* selectedDisplayMode = nullptr;
  BMDTimeValue			frameRateDuration;
  BMDTimeScale			frameRateScale;

  uint32_t deviceIndex = 0;
  BMDDisplayMode displayMode = bmdModeHD1080i50;
  BMDPixelFormat pixelFormat = bmdFormat10BitYUV;
  size_t argc = 3;
  napi_value args[3];
  status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  CHECK_STATUS;
  if (argc != 3) {
    NAPI_THROW_ERROR("Capture calls must have three arguments: device index, mode and format.");
  }

  status = napi_typeof(env, args[0], &type);
  CHECK_STATUS;
  if (type != napi_number) NAPI_THROW_ERROR("Device index must be a number.");
  status = napi_get_value_uint32(env, args[0], &deviceIndex);
  CHECK_STATUS;

  status = napi_typeof(env, args[1], &type);
  CHECK_STATUS;
  if (type != napi_number) NAPI_THROW_ERROR("Mode must be an enumeration value.");
  status = napi_get_value_uint32(env, args[1], &displayMode);
  CHECK_STATUS;

  status = napi_typeof(env, args[2], &type);
  CHECK_STATUS;
  if (type != napi_number) NAPI_THROW_ERROR("Format must be an enumeration value.");
  status = napi_get_value_uint32(env, args[2], &pixelFormat);
  CHECK_STATUS;

  status = napi_create_object(env, &result);
  CHECK_STATUS;
  status = napi_create_string_utf8(env, "capture", NAPI_AUTO_LENGTH, &param);
  CHECK_STATUS;
  status = napi_set_named_property(env, result, "type", param);
  CHECK_STATUS;

  #ifdef WIN32
  CoCreateInstance(CLSID_CDeckLinkIterator, NULL, CLSCTX_ALL, IID_IDeckLinkIterator, (void**)&deckLinkIterator);
  #else
  deckLinkIterator = CreateDeckLinkIteratorInstance();
  #endif

  for ( uint32_t x = 0 ; x <= deviceIndex ; x++ ) {
    if (deckLinkIterator->Next(&deckLink) != S_OK) {
      deckLinkIterator->Release();
      NAPI_THROW_ERROR("Device index exceeds the number of installed devices.");
    }
  }

  deckLinkIterator->Release();

  status = napi_set_named_property(env, result, "deviceIndex", args[0]);
  CHECK_STATUS;

  #ifdef WIN32
  BSTR deviceNameBSTR = NULL;
  hresult = deckLink->GetDisplayName(&deviceNameBSTR);
  if (hresult == S_OK) {
    _bstr_t deviceName(deviceNameBSTR, false);
    status = napi_create_string_utf8(env, (char*) deviceName, NAPI_AUTO_LENGTH, &param);
    CHECK_STATUS;
  }
  #elif __APPLE__
  CFStringRef deviceNameCFString = NULL;
  hresult = deckLink->GetDisplayName(&deviceNameCFString);
  if (hresult == S_OK) {
    char deviceName [64];
    CFStringGetCString(deviceNameCFString, deviceName, sizeof(deviceName), kCFStringEncodingMacRoman);
    CFRelease(deviceNameCFString);
    status = napi_create_string_utf8(env, deviceName, NAPI_AUTO_LENGTH, &param);
    CHECK_STATUS;
  }
  #else
  const char* deviceName;
  hresult = deckLink->GetDisplayName(&deviceName);
  if (hresult == S_OK) {
    status = napi_create_string_utf8(env, deviceName, NAPI_AUTO_LENGTH, &param);
    free(deviceName);
    CHECK_STATUS;
  }
  #endif

  status = napi_set_named_property(env, result, "displayName", param);
  CHECK_STATUS;

  captureCarrier* c = new captureCarrier;
  c->pixelFormat = pixelFormat;

  if (deckLink->QueryInterface(IID_IDeckLinkInput, (void **)&deckLinkInput) != S_OK) {
    deckLink->Release();
    NAPI_THROW_ERROR("Could not obtain the DeckLink Input interface.");
	}

  deckLink->Release();
  c->deckLinkInput = deckLinkInput;

  BMDDisplayModeSupport supported;

  hresult = deckLinkInput->DoesSupportVideoMode(displayMode, pixelFormat,
    bmdVideoInputFlagDefault, &supported, &selectedDisplayMode);
  switch (supported) {
    case bmdDisplayModeSupported:
      break;
    case bmdDisplayModeSupportedWithConversion:
      NAPI_THROW_ERROR("Display mode is supported via conversion and not by macadam.");
      break;
    default:
      NAPI_THROW_ERROR("Requested display mode is not supported.");
      break;
  }

  c->displayMode = selectedDisplayMode;

  #ifdef WIN32
  BSTR displayModeBSTR = NULL;
  hresult = selectedDisplayMode->GetName(&displayModeBSTR);
  if (hresult == S_OK) {
    _bstr_t deviceName(displayModeBSTR, false);
    status = napi_create_string_utf8(env, (char*) deviceName, NAPI_AUTO_LENGTH, &param);
    CHECK_STATUS;
  }
  #elif __APPLE__
  CFStringRef displayModeCFString = NULL;
  hresult = selectedDisplayMode->GetName(&displayModeCFString);
  if (hresult == S_OK) {
    char displayModeName[64];
    CFStringGetCString(displayModeCFString, displayModeName, sizeof(displayModeName), kCFStringEncodingMacRoman);
    CFRelease(displayModeCFString);
    status = napi_create_string_utf8(env, displayModeName, NAPI_AUTO_LENGTH, &param);
    CHECK_STATUS;
  }
  #else
  const char* displayModeName;
  hresult = selectedDisplayMode->GetName(&displayModeName);
  if (hresult == S_OK) {
    status = napi_create_string_utf8(env, displayModeName, NAPI_AUTO_LENGTH, &param);
    free(displayModeName);
    CHECK_STATUS;
  }
  #endif

  status = napi_set_named_property(env, result, "displayModeName", param);
  CHECK_STATUS;

  status = napi_create_int32(env, selectedDisplayMode->GetWidth(), &param);
  CHECK_STATUS;
  status = napi_set_named_property(env, result, "width", param);
  CHECK_STATUS;

  status = napi_create_int32(env, selectedDisplayMode->GetHeight(), &param);
  CHECK_STATUS;
  status = napi_set_named_property(env, result, "height", param);
  CHECK_STATUS;

  switch (selectedDisplayMode->GetFieldDominance()) {
    case bmdLowerFieldFirst:
      status = napi_create_string_utf8(env, "lowerFieldFirst", NAPI_AUTO_LENGTH, &param);
      break;
    case bmdUpperFieldFirst:
      status = napi_create_string_utf8(env, "upperFieldFirst", NAPI_AUTO_LENGTH, &param);
      break;
    case bmdProgressiveFrame:
      status = napi_create_string_utf8(env, "progressiveFrame", NAPI_AUTO_LENGTH, &param);
      break;
    default:
      status = napi_create_string_utf8(env, "unknown", NAPI_AUTO_LENGTH, &param);
      break;
  }
  CHECK_STATUS;
  status = napi_set_named_property(env, result, "fieldDominance", param);
  CHECK_STATUS;

  selectedDisplayMode->GetFrameRate(&frameRateDuration, &frameRateScale);
  status = napi_create_array(env, &param);
  CHECK_STATUS;
  status = napi_create_int64(env, frameRateDuration, &paramPart);
  CHECK_STATUS;
  status = napi_set_element(env, param, 0, paramPart);
  CHECK_STATUS;
  status = napi_create_int64(env, frameRateScale, &paramPart);
  CHECK_STATUS;
  status = napi_set_element(env, param, 1, paramPart);
  CHECK_STATUS;
  status = napi_set_named_property(env, result, "frameRate", param);
  CHECK_STATUS;

  uint32_t pixelFormatIndex = 0;

  while ((gKnownPixelFormats[pixelFormatIndex] != 0) &&
      (gKnownPixelFormatNames[pixelFormatIndex] != NULL)) {
    if (pixelFormat == gKnownPixelFormats[pixelFormatIndex]) {
      status = napi_create_string_utf8(env, gKnownPixelFormatNames[pixelFormatIndex],
        NAPI_AUTO_LENGTH, &param);
      CHECK_STATUS;
      status = napi_set_named_property(env, result, "pixelFormat", param);
      CHECK_STATUS;
      break;
    }
    pixelFormatIndex++;
  }

  status = napi_create_external(env, c, finalizeCarrier, nullptr, &param);
  CHECK_STATUS;
  status = napi_set_named_property(env, result, "deckLinkInput", param);
  CHECK_STATUS;

  return result;
}
