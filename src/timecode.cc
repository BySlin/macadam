/* Copyright 2018 Streampunk Media Ltd.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

/* -LICENSE-START-
 ** Copyright (c) 2010 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

#include "timecode.h"

macadamTimecode::macadamTimecode(
  uint16_t framesps,
  bool drop,
  uint8_t hours,
  uint8_t minutes,
  uint8_t seconds,
  uint8_t frames,
  uint8_t framePair) {

  fps = framesps;
  frameTab = new frameTable(framesps);
  if (drop) flags = flags | bmdTimecodeIsDropFrame;
  SetComponents(hours, minutes, seconds, frames);
}

BMDTimecodeBCD macadamTimecode::GetBCD() {

  return 0;
}

// Does not deal with 24fps timecode
HRESULT macadamTimecode::GetComponents (
  /* out */ uint8_t *hours,
  /* out */ uint8_t *minutes,
  /* out */ uint8_t *seconds,
  /* out */ uint8_t *frames) {

  if ((flags & bmdTimecodeIsDropFrame) != 0) {
    uint32_t baseTimecode = (fps > 30) ? value / 2 : value;
    uint16_t baseFps = (fps > 30) ? (uint16_t) (fps / 2) : fps;
    *frames = (uint8_t) (baseTimecode % baseFps);
    uint32_t totalSeconds = baseTimecode / baseFps;
    *seconds = ((uint8_t) totalSeconds % 60);
    uint32_t totalMinutes = totalSeconds / 60;
    *minutes = (uint8_t) totalMinutes % 60;
    *hours = totalMinutes / 60;

    if (fps > 30) {
      flags = flags & ~bmdTimecodeFieldMark;
      if ((value % 2) == 1) flags = flags | bmdTimecodeFieldMark;
    }
    return S_OK;
  }
  uint32_t baseTimecode = (fps > 30) ? value / 2 : value;
  *hours = baseTimecode / frameTab->dropFpHour;
  uint32_t remainingFrames = (uint32_t) (baseTimecode % frameTab->dropFpHour);
  uint32_t majorMinutes = remainingFrames / frameTab->dropFpMin10;
  remainingFrames = remainingFrames % frameTav->dropFpMin10;

  if (remainingFrames < (fps * 60)) {
    *minutes = majorMinutes * 10;
    *seconds = remainingFrames / 30;
    *frames = remainingFrames % 30;
  }
  else {
    remainingFrames = remainingFrames - (fps * 60);
    *minutes = majorMinutes * 10 + remainingFrames / frameTab->dropFpMin + 1;
    remainingFrames = remainingFrames % frameTab->dropFpMin;
    if (remainingFrames < (fps - 2)) { // Only the first second of a minute is short
      *seconds = 0;
      *frames = remainingFrames + 2;
    }
    else {
      remainingFrames += 2;
      *seconds = (remainingFrames / 30); // No 0 or 1 value.
      *frames = remainingFrames % 30;
    }
  }

  
  if (fps > 30) {
    flags = flags & ~bmdTimecodeFieldMark;
    if ((value % 2) == 1) flags = flags | bmdTimecodeFieldMark;
  }

  return S_OK;
}

HRESULT macadamTimecode::SetComponents (
  uint8_t hours,
  uint8_t minutes,
  uint8_t seconds,
  uint8_t frames,
  uint8_t framePair) {

  uint32_t tcv = 0;

  if ((flags & bmdTimecodeIsDropFrame) != 0) {
		tcv = (hours * frameTab->dropFpHour);
		tcv += ((minutes / 10) * frameTab->dropFpMin10);
		tcv += (minutes % 10) * frameTab->dropFpMin;
	}
	else {
		tcv = hours * frameTab->fpHour;
		tcv += minutes * frameTab->fpMinute;
	}

	tcv += seconds * ((fps > 30) ? fps / 2 : fps);
	tcv += frames;

  tcv = (fps > 30) ? value * 2 + framePair : value;
  value = tcv;
}

#ifdef WIN32
HRESULT macadamTimecode::GetString (/* out */ BSTR *timecode) {
  return E_NOTIMPL;
}
#elif __APPLE__
HRESULT macadamTimecode::GetString (/* out */ CFStringRef *timecode) {
  return E_NOTIMPL;
}
#else
HRESULT macadamTimecode::GetString (/* out */ const char* timecode) {
  return E_NOTIMPL;
}
#endif

BMDTimecodeFlags macadamTimecode::GetFlags (void) {
  return flags;
}

HRESULT macadamTimecode::GetTimecodeUserBits (/* out */ BMDTimecodeUserBits *userBits) {
  *userBits = usrBts;
}

HRESULT macadamTimecode::SetTimecodeUserBits (BMDTimecodeUserBits userBits) {
  usrBts = userBits;
}

void macadamTimecode::Update(void) {

}
